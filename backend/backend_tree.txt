
ðŸ“‚ Backend Directory Tree

â”œâ”€â”€ .env                                # Stores environment-specific configuration variables
â”œâ”€â”€ .gitignore                          # Specifies untracked files Git should ignore
â”œâ”€â”€ .prettierignore                     # Files and folders to ignore during code formatting
â”œâ”€â”€ .prettierrc                         # Configuration settings for Prettier code formatter
â”œâ”€â”€ package-lock.json                   # Auto-generated file for locking package versions
â”œâ”€â”€ package.json                        # Project metadata, scripts, and dependency definitions
â”œâ”€â”€ public                              # Static files accessible publicly (e.g. assets)
â”‚   â””â”€â”€ temp                            # Temporary files for session or dev use
â”‚       â””â”€â”€ token.js                    # Stores temporary JWT or token during processes
â”œâ”€â”€ README.md                           # Overview and instructions for setting up the project
â”œâ”€â”€ src                                 # Main application source code directory
â”‚   â”œâ”€â”€ app.js                          # Initializes and configures Express application
â”‚   â”œâ”€â”€ config                          # All service and environment-related configurations
â”‚   â”‚   â”œâ”€â”€ db.js                       # MongoDB or database connection logic
â”‚   â”‚   â”œâ”€â”€ email.config.js             # SMTP or third-party email service setup
â”‚   â”‚   â”œâ”€â”€ env.config.js               # Loads and validates environment variables
â”‚   â”‚   â”œâ”€â”€ logger.config.js            # Setup for logging system and log levels
â”‚   â”‚   â””â”€â”€ payment.config.js           # Configuration for payment gateway integrations
â”‚   â”œâ”€â”€ constant.js                     # Central location for fixed values and enums
â”‚   â”œâ”€â”€ controllers                     # Request handler functions for each route
â”‚   â”‚   â”œâ”€â”€ auth.controller.js          # Handles login, signup, and authentication flows
â”‚   â”‚   â”œâ”€â”€ blog.controller.js          # Manages blog creation, editing, and deletion
â”‚   â”‚   â”œâ”€â”€ booking.controller.js       # Handles user bookings, availability, and flow
â”‚   â”‚   â”œâ”€â”€ email.controller.js         # Sends and verifies emails, OTPs, and notifications
â”‚   â”‚   â”œâ”€â”€ payment.controller.js       # Handles transactions, orders, and callbacks
â”‚   â”‚   â””â”€â”€ product.controller.js       # Manages product listings, updates, and removal
â”‚   â”œâ”€â”€ docs                            # Swagger or markdown API documentation files
â”‚   â”œâ”€â”€ middleware                      # Functions that run before route handlers
â”‚   â”‚   â”œâ”€â”€ auth.middleware.js          # Verifies if the user is authenticated via token
â”‚   â”‚   â”œâ”€â”€ error.middleware.js         # Captures and formats errors across the app
â”‚   â”‚   â”œâ”€â”€ multer.middleware.js        # Handles file uploads using Multer
â”‚   â”‚   â”œâ”€â”€ role.middleware.js          # Grants/denies access based on user roles
â”‚   â”‚   â”œâ”€â”€ upload.middleware.js        # File storage setup and validations
â”‚   â”‚   â””â”€â”€ validate.middleware.js      # Validates incoming request data structure
â”‚   â”œâ”€â”€ models                          # Mongoose schemas and database models
â”‚   â”‚   â”œâ”€â”€ blog.model.js               # Structure for blog posts in the database
â”‚   â”‚   â”œâ”€â”€ booking.model.js            # Booking schema with user and slot reference
â”‚   â”‚   â”œâ”€â”€ payment.model.js            # Schema for storing payment and transaction data
â”‚   â”‚   â”œâ”€â”€ product.model.js            # Schema for religious products in store
â”‚   â”‚   â””â”€â”€ user.model.js               # User data structure including roles and auth
â”‚   â”œâ”€â”€ routes                          # Defines API endpoints for each module
â”‚   â”‚   â”œâ”€â”€ auth.routes.js              # Authentication-related API endpoints
â”‚   â”‚   â”œâ”€â”€ blog.routes.js              # CRUD routes for blog content
â”‚   â”‚   â”œâ”€â”€ booking.routes.js           # Endpoints to manage puja/slot bookings
â”‚   â”‚   â”œâ”€â”€ email.routes.js             # Routes for sending or verifying email
â”‚   â”‚   â”œâ”€â”€ index.routes.js             # Combines and exports all route modules
â”‚   â”‚   â”œâ”€â”€ payment.routes.js           # Routes to initiate and verify payments
â”‚   â”‚   â””â”€â”€ product.routes.js           # Endpoints to manage product catalog
â”‚   â”œâ”€â”€ scripts                         # One-time setup or utility scripts (optional)
â”‚   â”œâ”€â”€ server.js                       # Entry file to start the Node.js/Express server
â”‚   â”œâ”€â”€ services                        # Business logic used by controllers
â”‚   â”‚   â”œâ”€â”€ auth.service.js             # Auth operations like token generation
â”‚   â”‚   â”œâ”€â”€ blog.service.js             # Blog logic like formatting, filtering, etc.
â”‚   â”‚   â”œâ”€â”€ booking.service.js          # Business logic for managing bookings
â”‚   â”‚   â”œâ”€â”€ email.service.js            # Email logic and API integration (like nodemailer)
â”‚   â”‚   â”œâ”€â”€ payment.service.js          # Payment-related functions and gateway calls
â”‚   â”‚   â””â”€â”€ product.service.js          # Logic for searching, sorting, or managing products
â”‚   â”œâ”€â”€ tests                           # Unit and integration test cases
â”‚   â”œâ”€â”€ uploads                         # Stores uploaded images or documents
â”‚   â”œâ”€â”€ utils                           # Helper functions used across modules
â”‚   â”‚   â”œâ”€â”€ ApiError.js                 # Custom class to standardize error handling
â”‚   â”‚   â”œâ”€â”€ ApiResponse.js              # Wrapper for structured JSON responses
â”‚   â”‚   â”œâ”€â”€ asyncHandler.js             # Catches async errors in route handlers
â”‚   â”‚   â”œâ”€â”€ cloudinary.js               # Cloudinary SDK setup for media uploads
â”‚   â”‚   â”œâ”€â”€ email.utils.js              # Helper methods for composing email messages
â”‚   â”‚   â”œâ”€â”€ errorHandler.js             # Common logic for handling exceptions
â”‚   â”‚   â”œâ”€â”€ generateToken.js            # Generates JWTs for authentication
â”‚   â”‚   â”œâ”€â”€ logger.js                   # Logging utility for debugging or production
â”‚   â”‚   â”œâ”€â”€ payment.utils.js            # Utilities for formatting or verifying payment data
â”‚   â”‚   â”œâ”€â”€ sendEmail.js                # Sends email through configured service
â”‚   â”‚   â””â”€â”€ validateInput.js            # Validates data against schemas before processing
â”‚   â”œâ”€â”€ validations                     # Request validation schemas using Joi or similar
â”‚   â””â”€â”€ views                           # Dynamic or HTML views for emails or frontend
â”‚       â””â”€â”€ emails
â”‚           â””â”€â”€ resetPassword.html     # HTML template for reset password email
â””â”€â”€ tree.js                             # Script to auto-generate this project structure
